<?php
/**
 * Implements hook_block_info().
 *
 * This function tells drupal about our block.
 *
 * For more information on this function, see:
 * http://api.drupal.org/api/drupal/modules block block.api.php/function/hook_block_info/7
 */
function rbsc_search_block_info() {
        // Create an array that will hold our blocks
        $blocks = array();
 
        // Create a key in our $blocks array that
        // defines our block.  Note that the key in
        // this array can be anything.  For this
        // tutorial, we  use 'tellafriend_form'.
        $blocks['rbsc_search_form'] = array(
                // 'info' is what you will see when viewing the blocks admin page.
                // Note that we use the t() (translate) function which lets drupal
                // translate any text passed in if needed.
                'info' => t('RBSC Site Search'),
                // 'cache' how this block will be cached
                'cache' => DRUPAL_CACHE_GLOBAL,
        );
 
        // Note, if you wanted to define multiple blocks, you 
        // could simply define more blocks just like above.
 
        // Finally, we return the $blocks array.
        return $blocks;
}
 
/**
 * Implements hook_block_view().
 * 
 * This function tells drupal how to define our block when viewed.
 *
 * For more information on this function, see:
 * http://api.drupal.org/api/drupal/modules block block.api.php/function/hook_block_view/7
 */
function rbsc_search_block_view($delta = '') {
        // Create an array that will be returned as our block
        $block = array();
 
        // Since hook_block_view is called for every block,
        // Drupal passes in $delta (the key of the blocks defined
        // in hook_block_info.  In our case, we're checking for
        // $delta to be 'tellafriend_form'.
        switch($delta) {
                case 'rbsc_search_form':
                        // Since this $delta matches our case, we'll define
                        // the subject and contents.
 
                        // 'subject' can be blank ('') or anything you wish to define.
                        $block['subject'] = t('RBSC Site Search');
 
                        // 'content' are just that, the contents of the block.
                        // In our case, we will be showing a form.
                        // We use drupal_get_form() to return a drupal-built form.
                        // Note that the parameter passed to drupal_get_form is the name
                        // of the function we will build below to define our form.
                        // This can be any function name we define below.
                        $block['content'] = drupal_get_form('rbsc_search_form');
                break;
        }
 
        // Finally, we return the $block array.
        return $block;
}


function rbsc_search_form($form, &$form_state) {


  $form['query'] = array (
    '#type'  => 'textfield',
    '#title' =>  t('Site Search'),
    '#name' => 'query',
    '#size'  => 80
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
   );
    
   $form['#method'] = "post";
   //$form['#submit'] = array('allsearch_block_form_redirect');

   return $form;

}

/**
 * Validation for input_simple_form().
 */
function rbsc_search_form_validate($form, &$form_state) {

  $term = $form_state['values']['query'];

  if($term == "") {
    form_set_error('term', t('What do you want to search for?'));
  }

}

function rbsc_search_form_redirect($form, &$form_state) {
  $form_state['redirect'] = 'find/' . $form_state['values']['query'];
}

/**
 * Submit function for input_simple_form().
 */
function rbsc_search_form_submit($form, &$form_state) {
  drupal_goto('find/' . $form_state['values']['query']);
  // Display a message upon successful submission.
  drupal_set_message(t("You searched for @query", array('@query' => $form_state['values']['query'])));
}